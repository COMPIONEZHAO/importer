TODO:
==============

- Add ability to do batch rename of field names (e.g. replacing dots with ...)

- Add support for tika SentimentParser.

- Have new taggers: 
    - ExtensionTagger, given a URL, tries to get extension from content type 
      if not found in reference.
    - Add overwrite=true|false to ReplaceTagger? 

- To remove/adjust when released in Apache Tika:

    - Remove CharsetDetector in favor of Tika original one once fixed:
      https://issues.apache.org/jira/browse/TIKA-2219

    - Remove WordPerfect, Quattro Pro, and XFDL from 
      GenericDocumentParserFactory as well as from custom-mimetypes.xml.
      https://issues.apache.org/jira/browse/TIKA-1946
      https://issues.apache.org/jira/browse/TIKA-2228
      https://issues.apache.org/jira/browse/TIKA-2222
      
    - Remove copy of PDF2XHTML from Importer once upgrading to Tika 1.15.

    - Remove JBIG2-related code/files if accepted:
      https://issues.apache.org/jira/browse/TIKA-2232

- Consider adding LIRE support (image info extraction for image search).
  http://www.lire-project.net/

- Consider creating an ExternalTagger which expects metadata extraction patterns
  from STDOUT/STDERR or from output file.

- Allow to specify data unit for DocumentLengthTagger (with locale and decimal
  precision).

- Find out if we can reduce metadata extraction on images to avoid 
  OOMException on some images with massive amount of metadata.

- Investigate Tika Named Entity Parser: 
  https://wiki.apache.org/tika/TikaAndNER

- Investigate Tika Natural Language Toolkit: 
  https://wiki.apache.org/tika/TikaAndNLTK

- Maybe ship with a default tika-config on a given path so it can easily be
  modified: https://tika.apache.org/1.12/configuring.html

- Add better defined Geospatial Data Abstraction Library (GDAL) support, 
  leveraging Tika GDAL support (requires external app install, like
  Tesserac OCR feature).

- Create an ImageConverterTransformer that would convert images from/to
  format of choice. This could allow for instance to convert some 
  formats non-supported by Tesseract OCR into some that are.
    
- Have a maximum recursivity setting somewhere in GenericDocumentParserFactory?
  Alternatively, consider moving to using RecursiveParserWrapper which 
  already supports that.

- MAYBE: Consider interactive shell script invoking the importer.

- MAYBE: Have <restrictTo> being optional wrapping tag that can group
  multiple other handlers, so the condition does not have to be repeated in 
  each. E.g.:
  
  <preParseHandlers>
    <tagger>
    <filter>
    <restrictTo>
      <tagger>
      <transformer>
    </restrictTo>
  Have this in addition or as a replacement to current approach?
  